<snippet>
	<content><![CDATA[
string to_string(string s) {
    return '"' + s + '"';
}
 
string to_string(const char* s) {
    return to_string((string) s);
}
 
string to_string(bool b) {
    return (b ? "true" : "false");
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
    if (!first) {
        res += ", ";
    }     
    first = false;
    res += to_string(x);
    }  
    res += "}";
    return res;
}
 
void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
    if(sizeof...(T)){
    cerr << ", ";
    }
    debug_out(T...);
}
 
#ifndef LOCAL
#define debug(...) cerr << "[" << #_VA_ARGS_ << "]:", debug_out(_VA_ARGS_)
#else
#define debug(...) 42
#endif
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>debug</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>