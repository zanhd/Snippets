<snippet>
	<content><![CDATA[
struct segmentTree
{
	vector<int> st;
	int n = 0;
	
	void init(int _n)
	{
		n = _n;
		st.resize(4 * n  + 1, 0);
	}

	void buildHelper(int node, int beg, int end, vector<int> &a)
	{
		if(beg == end)
		{
			//leaf
			st[node] = a[beg];
			return;
		}

		int mid = (beg + end) / 2;

		buildHelper(2 * node, beg, mid, a); 			//left-subTree
		buildHelper(2 * node + 1, mid + 1, end, a);		//right-subTree

		st[node] = st[2 * node] + st[2 * node + 1];
		
	}

	void build(vector<int> &a)
	{
		init(a.size());
		buildHelper(1, 0, n - 1, a);
	}

	void updateHelper(int node, int beg, int end, int i, int value)
	{
		if(beg == end) //leaf
		{
			if(beg == i)
			{
				st[node] = value;
			}

			return;
		}

		int mid = (beg + end) / 2;

		if(i <= mid) updateHelper(2 * node, beg, mid, i, value); //left-subTree
		else updateHelper(2 * node, mid + 1, end, i, value); //right - subTree

		st[node] = st[2 * node] + st[2 * node + 1];
	}

	void update(int i, int value)
	{
		updateHelper(1, 0, n - 1, i, value);
	}

	int sumHelper(int node, int beg, int end, int l, int r)
	{
		//no - overlap
		if(end < l || r < beg) return 0;

		//Full - overlap
		if(l <= beg && end <= r) return st[node];

		//partial-overlap
		int mid = (beg + end) / 2;
		return sumHelper(2 * node, beg, mid, l, r) + sumHelper(2 * node + 1, mid + 1, end, l, r);
	}

	int sum(int l, int r)
	{
		return sumHelper(1, 0, n - 1, l, r);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segmentTree_RangeSum</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
